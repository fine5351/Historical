@startuml nats-api-sequence
!theme vibrant

title NATS API Message Publishing and Consumption Sequence

actor "User/HTTP Client" as Client
participant "NatsController" as Controller
participant "NatsProducerService" as ProducerService
participant "NatsLoggingAspect" as LoggingAspect
participant "NATS Server" as NatsServer
participant "NatsConsumerService" as ConsumerService

skinparam sequenceMessageAlign center
skinparam roundcorner 10
skinparam ParticipantPadding 20
skinparam BoxPadding 10

== API Message Publishing ==

Client -> Controller: POST /api/nats/publish\n(subject, message)
activate Controller #SkyBlue

Controller -> ProducerService: publish(subject, message)
activate ProducerService #Orange

LoggingAspect -> ProducerService: <<around>> Intercept publish
note left: Log: Before publish (subject, payload summary)
activate LoggingAspect #SpringGreen
LoggingAspect -->> ProducerService: Proceed with method

ProducerService -> NatsServer: Publish Message
activate NatsServer #IndianRed
NatsServer -->> ProducerService: Ack (Implicit for Core NATS)
deactivate NatsServer

LoggingAspect -> ProducerService: <<around>> Log successful publish
note left: Log: Successfully published
deactivate LoggingAspect

ProducerService -->> Controller: Return (void)
deactivate ProducerService

Controller -->> Client: HTTP 200 OK ("Event published successfully...")
deactivate Controller

== Asynchronous Message Consumption ==

note over NatsServer, ConsumerService: NatsConsumerService is already subscribed\nto its topic (e.g., "com.finekuo.nats.example.topic")\nvia @PostConstruct initialization.

NatsServer -> ConsumerService: Deliver Message
activate ConsumerService #MediumPurple

LoggingAspect -> ConsumerService: <<around>> Intercept handleMessage
note left: Log: Before handleMessage (subject, SID, payload summary)
activate LoggingAspect #SpringGreen
LoggingAspect -->> ConsumerService: Proceed with method

ConsumerService -> ConsumerService: Process Message\n(logic within handleMessage)
note right of ConsumerService
  Includes converting message data
  and any business logic.
  Internal logging is DEBUG level.
end note

LoggingAspect -> ConsumerService: <<around>> Log successful processing
note left: Log: Successfully processed message
deactivate LoggingAspect

deactivate ConsumerService

@enduml

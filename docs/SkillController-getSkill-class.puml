@startuml
package com.finekuo.springdatajpa.controller {
  class SkillController {
    -skillService: SkillService
    +getSkill(): BaseResponse<GetSkillPayload>
  }
}

package com.finekuo.springdatajpa.service {
  interface SkillService {
    +getAllSkills(): List<Skill> ' Assuming Skill is an entity
  }
}

package com.finekuo.springdatajpa.entity {
  class Skill { ' Assuming this entity exists
    +id: Long
    +name: String
  }
}

package com.finekuo.springdatajpa.dto {
  class SkillDTO {
    +id: Long
    +name: String
    ' Constructor SkillDTO(id, name)
  }
}

package com.finekuo.springdatajpa.dto.response {
  class GetSkillPayload {
    +skills: List<SkillDTO>
    ' Constructor GetSkillPayload(list)
  }
}

package com.finekuo.normalcore.dto.response {
  class BaseResponse<T> {
    +static success(data: T): BaseResponse<T>
  }
}

com.finekuo.springdatajpa.controller.SkillController ..> com.finekuo.springdatajpa.service.SkillService : uses
com.finekuo.springdatajpa.controller.SkillController ..> com.finekuo.springdatajpa.dto.SkillDTO : uses
com.finekuo.springdatajpa.controller.SkillController ..> com.finekuo.springdatajpa.dto.response.GetSkillPayload : creates & uses
com.finekuo.springdatajpa.controller.SkillController ..> com.finekuo.normalcore.dto.response.BaseResponse : uses

com.finekuo.springdatajpa.service.SkillService ..> com.finekuo.springdatajpa.entity.Skill : returns List
com.finekuo.springdatajpa.dto.SkillDTO ..> com.finekuo.springdatajpa.entity.Skill : (data mapping from)

com.finekuo.springdatajpa.dto.response.GetSkillPayload o-- com.finekuo.springdatajpa.dto.SkillDTO : contains List
com.finekuo.normalcore.dto.response.BaseResponse o-- com.finekuo.springdatajpa.dto.response.GetSkillPayload : (T is GetSkillPayload)
@enduml
